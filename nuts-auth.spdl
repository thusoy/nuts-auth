hashfunction MAC, KDF;
usertype SecurityAssociation, Command, SequenceNumber;
const SAprop, SA: SecurityAssociation;
const Sseq1, Sseq2, Cseq1, Cseq2: SequenceNumber;
const CMD, ACK: Command;
macro Ks = KDF(k(BS, Sat), Ra, Rb);

protocol NUTSAuth (BS,Sat) {


    role BS {
        var Ra: Nonce;
        fresh Rb: Nonce;

        # Key exchange and mutual authentication
        send_1(BS, Sat, Rb, MAC(k(BS, Sat), BS, Sat, Rb));
        recv_2(Sat, BS, Ra, MAC(k(BS, Sat), Sat, BS, Ra, Rb));
        send_3(BS, Sat, SAprop, MAC(k(BS, Sat), BS, Sat, SAprop, Ra));
        recv_4(Sat, BS, SA, MAC(Ks, Sat, BS, SA));

        # Send command
        send_5(BS, Sat, CMD, MAC(Ks, Cseq1, CMD));
        recv_6(Sat, BS, ACK, MAC(Ks, Sseq1, ACK));

        # Send another command (repeat CMDs for scyther to spot replay attacks)
        send_7(BS, Sat, CMD, MAC(Ks, Cseq2, CMD));
        recv_8(Sat, BS, ACK, MAC(Ks, Sseq2, ACK));

        claim(BS, Alive);
        claim(BS, Secret, Ks);
        claim(BS, Weakagree);
        claim(BS, Niagree);
        claim(BS, Nisynch);
    };

    role Sat {
        fresh Ra: Nonce;
        var Rb: Nonce;

        # Key exchange and mutual authentication
        recv_1(BS, Sat, Rb, MAC(k(BS, Sat), BS, Sat, Rb));
        send_2(Sat, BS, Ra, MAC(k(BS, Sat), Sat, BS, Ra, Rb));
        recv_3(BS, Sat, SAprop, MAC(k(BS, Sat), BS, Sat, SAprop, Ra));
        send_4(Sat, BS, SA, MAC(Ks, Sat, BS, SA));

        # Receive command
        recv_5(BS, Sat, CMD, MAC(Ks, Cseq1, CMD));
        send_6(Sat, BS, ACK, MAC(Ks, Sseq1, ACK));

        # Receive second command
        recv_7(BS, Sat, CMD, MAC(Ks, Cseq2, CMD));
        send_8(Sat, BS, ACK, MAC(Ks, Sseq2, ACK));

        claim(Sat, Alive);
        claim(Sat, Secret, Ks);
        claim(Sat, Weakagree);
        claim(Sat, Niagree);
        claim(Sat, Nisynch);
    };
}
